name: Playwright CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [ chrome, firefox, webkit ]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci
      - run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.project }}

      - name: Upload JUnit for ${{ matrix.project }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.project }}
          path: results/junit.xml

      - name: Upload HTML report (${{ matrix.project }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report/

      - name: Upload test-results (${{ matrix.project }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.project }}
          path: test-results/

      # --- Publish test results ---
  publish-report:
    needs: e2e
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download all junit-* artifacts into results/
      - name: Download JUnit artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: junit-*
          path: results
          merge-multiple: true

      # PR comment & check summary using all JUnit files
      - name: Publish unit test results (PR comment)
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: results/**/*.xml

      # Job summary table
      - name: Job Summary
        run: |
          node -e "
          const fs=require('fs'), gl=require('glob');
          const files=gl.sync('results/**/*.xml');
          let total=0, failed=0, skipped=0;
          for (const f of files) {
            const xml=fs.readFileSync(f,'utf8');
            total  += (xml.match(/<testcase /g)||[]).length;
            failed += (xml.match(/<failure /g)||[]).length + (xml.match(/<error /g)||[]).length;
            skipped+= (xml.match(/<skipped/g)||[]).length;
          }
          const passed=total-failed-skipped;
          const md=[
            '# Playwright Summary',
            '',
            '| Total | Passed | Failed | Skipped |',
            '|------:|------:|------:|--------:|',
            `| ${total} | ${passed} | ${failed} | ${skipped} |`
          ].join('\\n');
          fs.writeFileSync(process.env.GITHUB_STEP_SUMMARY, md);
          "






































# name: Playwright E2E

# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
#   # Optional: nightly full run
#   schedule:
#     - cron: '0 2 * * *' # 02:00 UTC daily

# jobs:
#   smoke:
#     name: Smoke (Chromium, Sign &/or Fax)
#     runs-on: ubuntu-latest
#     timeout-minutes: 30

#     steps:
#       - uses: actions/checkout@v4

#       - uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       # Cache node_modules for faster builds
#       - name: Cache npm
#         uses: actions/cache@v4
#         with:
#           path: |
#             ~/.npm
#             node_modules
#           key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-npm-

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Run smoke on Chromium
#         env:
#           TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
#           TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
#         run: |
#           # Example: run @smoke-tagged tests only, on Chromium Sign project
#           npx playwright test -g "@smoke" --project=chromium-sign
#           # Optionally also run Fax smoke:
#           # npx playwright test -g "@smoke" --project=chromium-fax

#       - name: Upload Playwright report
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: playwright-report-smoke
#           path: playwright-report
#           retention-days: 14

#       - name: Upload traces & videos
#         if: failure() || cancelled()
#         uses: actions/upload-artifact@v4
#         with:
#           name: playwright-artifacts-smoke
#           path: |
#             test-results/**/*
#             playwright-report/data/**
#           retention-days: 14

#   # Optional: full regression (Chromium + Firefox) on schedule
#   full:
#     if: github.event_name == 'schedule'
#     name: Full (Chromium + Firefox)
#     runs-on: ubuntu-latest
#     timeout-minutes: 60
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: 20
#       - run: npm ci
#       - run: npx playwright install --with-deps
#       - name: Run full suite
#         env:
#           TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
#           TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
#         run: |
#           npx playwright test --project=chromium-sign
#           npx playwright test --project=firefox-sign
#           # Optionally add fax here too
#           # npx playwright test --project=chromium-fax
#       - name: Upload Playwright report
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: playwright-report-full
#           path: playwright-report
#           retention-days: 14
